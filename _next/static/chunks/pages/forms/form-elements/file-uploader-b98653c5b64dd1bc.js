(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3485],{89841:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/forms/form-elements/file-uploader",function(){return t(69015)}])},93682:function(e,n,t){"use strict";t.d(n,{Z:function(){return z}});var i=t(85893),o=t(67294),r=t(99226),s=t(66242),l=t(34386),a=t(67720),c=t(57922),d=t(93946),p=t(78445),m=t(44267),u=t(96420),x=t(98396),h=t(33454),g=t(79878),f=t(15660),j=t.n(f),y=t(86501),b=t(66485),v=t.n(b);let Z=e=>e&&("TEXTAREA"===e.nodeName||"INPUT"===e.nodeName);var F=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=(0,o.useRef)(null),t=()=>{e.onSuccess&&e.onSuccess(),e.selectOnCopy&&Z(n.current)&&n.current.select()},i=()=>{e.onError&&e.onError();let t=!1!==e.selectOnError;t&&Z(n.current)&&n.current.select()},r=e=>{v()(e).then(t).catch(i)},s=(0,o.useCallback)(e=>{"string"==typeof e?r(e):n.current&&r(n.current.value)},[]);return{copy:s,target:n}};let I=e=>{let{id:n,sx:t,code:f,title:b,children:v,className:Z}=e,[I,z]=(0,o.useState)(!1),[R,T]=(0,o.useState)(null!==f.tsx?"tsx":"jsx"),B=F(),N=(0,x.Z)(e=>e.breakpoints.down("md"));(0,o.useEffect)(()=>{j().highlightAll()},[I,R]);let C=()=>null!==f.tsx&&"tsx"===R?f.tsx.props.children.props.children:null!==f.jsx&&"jsx"===R?f.jsx.props.children.props.children:"",S=()=>{B.copy(C()),y.ZP.success("The source code has been copied to your clipboard.",{duration:2e3})};return(0,i.jsxs)(s.Z,{className:Z,sx:{"& .MuiCardHeader-action":{lineHeight:.8},...t},id:n||"card-snippet--".concat(b.toLowerCase().replace(/ /g,"-")),children:[(0,i.jsx)(p.Z,{title:b,...N?{}:{action:(0,i.jsx)(d.Z,{onClick:()=>z(!I),children:(0,i.jsx)(g.Z,{icon:"tabler:code",fontSize:20})})}}),(0,i.jsx)(m.Z,{children:v}),N?null:(0,i.jsxs)(c.Z,{in:I,children:[(0,i.jsx)(a.Z,{sx:{my:"0 !important"}}),(0,i.jsxs)(m.Z,{sx:{position:"relative","& pre":{m:"0 !important",maxHeight:500}},children:[(0,i.jsx)(r.Z,{sx:{mb:4,display:"flex",alignItems:"center",justifyContent:"flex-end"},children:(0,i.jsxs)(h.Z,{exclusive:!0,size:"small",color:"primary",value:R,onChange:(e,n)=>null!==n?T(n):null,children:[null!==f.tsx?(0,i.jsx)(u.Z,{value:"tsx",children:(0,i.jsx)(g.Z,{icon:"tabler:brand-typescript",fontSize:20})}):null,null!==f.jsx?(0,i.jsx)(u.Z,{value:"jsx",children:(0,i.jsx)(g.Z,{icon:"tabler:brand-javascript",fontSize:20})}):null]})}),(0,i.jsx)(l.Z,{title:"Copy the source",placement:"top",children:(0,i.jsx)(d.Z,{onClick:S,sx:{top:"5rem",color:"grey.100",right:"2.5625rem",position:"absolute"},children:(0,i.jsx)(g.Z,{icon:"tabler:copy",fontSize:20})})}),(0,i.jsx)("div",{children:null!==f[R]?f[R]:null})]})]})]})};var z=I},46762:function(e,n,t){"use strict";var i=t(85893),o=t(86886);let r=e=>{let{title:n,subtitle:t}=e;return(0,i.jsxs)(o.ZP,{item:!0,xs:12,children:[n,t||null]})};n.Z=r},69015:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return N}});var i=t(85893),o=t(41664),r=t.n(o),s=t(86886),l=t(90948),a=t(15861),c=t(46762),d=t(93682),p=t(99226);let m=(0,l.ZP)(p.Z)(e=>{let{theme:n}=e;return{"&.dropzone, & .dropzone":{minHeight:300,display:"flex",flexWrap:"wrap",cursor:"pointer",position:"relative",alignItems:"center",justifyContent:"center",padding:n.spacing(4),borderRadius:n.shape.borderRadius,border:"2px dashed ".concat(n.palette.divider),[n.breakpoints.down("xs")]:{textAlign:"center"},"&:focus":{outline:"none"},"& + .MuiList-root":{padding:0,marginTop:n.spacing(6.25),"& .MuiListItem-root":{display:"flex",justifyContent:"space-between",borderRadius:n.shape.borderRadius,padding:n.spacing(2.5,2.4,2.5,6),border:"1px solid ".concat("light"===n.palette.mode?"rgba(93, 89, 98, 0.14)":"rgba(247, 244, 254, 0.14)"),"& .file-details":{display:"flex",alignItems:"center"},"& .file-preview":{display:"flex",marginRight:n.spacing(3.75),"& svg":{fontSize:"2rem"}},"& img":{width:38,height:38,padding:n.spacing(.75),borderRadius:n.shape.borderRadius,border:"1px solid ".concat("light"===n.palette.mode?"rgba(93, 89, 98, 0.14)":"rgba(247, 244, 254, 0.14)")},"& .file-name":{fontWeight:600},"& + .MuiListItem-root":{marginTop:n.spacing(3.5)}},"& + .buttons":{display:"flex",justifyContent:"flex-end",marginTop:n.spacing(6.25),"& > :first-of-type":{marginRight:n.spacing(3.5)}}},"& img.single-file-image":{objectFit:"cover",position:"absolute",width:"calc(100% - 1rem)",height:"calc(100% - 1rem)",borderRadius:n.shape.borderRadius}}}});var u=t(67294),x=t(79878),h=t(8523);let g=()=>{let[e,n]=(0,u.useState)([]),{getRootProps:t,getInputProps:o}=(0,h.uI)({multiple:!1,accept:{"image/*":[".png",".jpg",".jpeg",".gif"]},onDrop:e=>{n(e.map(e=>Object.assign(e)))}}),r=e.map(e=>(0,i.jsx)("img",{alt:e.name,className:"single-file-image",src:URL.createObjectURL(e)},e.name));return(0,i.jsxs)(p.Z,{...t({className:"dropzone"}),sx:e.length?{height:450}:{},children:[(0,i.jsx)("input",{...o()}),e.length?r:(0,i.jsxs)(p.Z,{sx:{display:"flex",textAlign:"center",alignItems:"center",flexDirection:"column"},children:[(0,i.jsx)(p.Z,{sx:{mb:8.75,width:48,height:48,display:"flex",borderRadius:1,alignItems:"center",justifyContent:"center",backgroundColor:e=>"rgba(".concat(e.palette.customColors.main,", 0.08)")},children:(0,i.jsx)(x.Z,{icon:"tabler:upload",fontSize:"1.75rem"})}),(0,i.jsx)(a.Z,{variant:"h4",sx:{mb:2.5},children:"Drop files here or click to upload."}),(0,i.jsx)(a.Z,{sx:{color:"text.secondary"},children:"(This is just a demo drop zone. Selected files are not actually uploaded.)"})]})]})};var f=t(78462),j=t(11057),y=t(19294),b=t(93946);let v=()=>{let[e,n]=(0,u.useState)([]),{getRootProps:t,getInputProps:o}=(0,h.uI)({onDrop:e=>{n(e.map(e=>Object.assign(e)))}}),r=e=>e.type.startsWith("image")?(0,i.jsx)("img",{width:38,height:38,alt:e.name,src:URL.createObjectURL(e)}):(0,i.jsx)(x.Z,{icon:"tabler:file-description"}),s=t=>{let i=e.filter(e=>e.name!==t.name);n([...i])},l=e.map(e=>(0,i.jsxs)(y.ZP,{children:[(0,i.jsxs)("div",{className:"file-details",children:[(0,i.jsx)("div",{className:"file-preview",children:r(e)}),(0,i.jsxs)("div",{children:[(0,i.jsx)(a.Z,{className:"file-name",children:e.name}),(0,i.jsx)(a.Z,{className:"file-size",variant:"body2",children:Math.round(e.size/100)/10>1e3?"".concat((Math.round(e.size/100)/1e4).toFixed(1)," mb"):"".concat((Math.round(e.size/100)/10).toFixed(1)," kb")})]})]}),(0,i.jsx)(b.Z,{onClick:()=>s(e),children:(0,i.jsx)(x.Z,{icon:"tabler:x",fontSize:20})})]},e.name)),c=()=>{n([])};return(0,i.jsxs)(u.Fragment,{children:[(0,i.jsxs)("div",{...t({className:"dropzone"}),children:[(0,i.jsx)("input",{...o()}),(0,i.jsxs)(p.Z,{sx:{display:"flex",textAlign:"center",alignItems:"center",flexDirection:"column"},children:[(0,i.jsx)(p.Z,{sx:{mb:8.75,width:48,height:48,display:"flex",borderRadius:1,alignItems:"center",justifyContent:"center",backgroundColor:e=>"rgba(".concat(e.palette.customColors.main,", 0.08)")},children:(0,i.jsx)(x.Z,{icon:"tabler:upload",fontSize:"1.75rem"})}),(0,i.jsx)(a.Z,{variant:"h4",sx:{mb:2.5},children:"Drop files here or click to upload."}),(0,i.jsx)(a.Z,{sx:{color:"text.secondary"},children:"(This is just a demo drop zone. Selected files are not actually uploaded.)"})]})]}),e.length?(0,i.jsxs)(u.Fragment,{children:[(0,i.jsx)(f.Z,{children:l}),(0,i.jsxs)("div",{className:"buttons",children:[(0,i.jsx)(j.Z,{color:"error",variant:"outlined",onClick:c,children:"Remove All"}),(0,i.jsx)(j.Z,{variant:"contained",children:"Upload Files"})]})]}):null]})};var Z=t(86501);let F=()=>{let[e,n]=(0,u.useState)([]),{getRootProps:t,getInputProps:o}=(0,h.uI)({maxFiles:2,maxSize:2e6,accept:{"image/*":[".png",".jpg",".jpeg",".gif"]},onDrop:e=>{n(e.map(e=>Object.assign(e)))},onDropRejected:()=>{Z.ZP.error("You can only upload 2 files & maximum size of 2 MB.",{duration:2e3})}}),r=e=>e.type.startsWith("image")?(0,i.jsx)("img",{width:38,height:38,alt:e.name,src:URL.createObjectURL(e)}):(0,i.jsx)(x.Z,{icon:"tabler:file-description"}),s=t=>{let i=e.filter(e=>e.name!==t.name);n([...i])},l=e.map(e=>(0,i.jsxs)(y.ZP,{children:[(0,i.jsxs)("div",{className:"file-details",children:[(0,i.jsx)("div",{className:"file-preview",children:r(e)}),(0,i.jsxs)("div",{children:[(0,i.jsx)(a.Z,{className:"file-name",children:e.name}),(0,i.jsx)(a.Z,{className:"file-size",variant:"body2",children:Math.round(e.size/100)/10>1e3?"".concat((Math.round(e.size/100)/1e4).toFixed(1)," mb"):"".concat((Math.round(e.size/100)/10).toFixed(1)," kb")})]})]}),(0,i.jsx)(b.Z,{onClick:()=>s(e),children:(0,i.jsx)(x.Z,{icon:"tabler:x",fontSize:20})})]},e.name)),c=()=>{n([])};return(0,i.jsxs)(u.Fragment,{children:[(0,i.jsxs)("div",{...t({className:"dropzone"}),children:[(0,i.jsx)("input",{...o()}),(0,i.jsxs)(p.Z,{sx:{display:"flex",textAlign:"center",alignItems:"center",flexDirection:"column"},children:[(0,i.jsx)(p.Z,{sx:{mb:8.75,width:48,height:48,display:"flex",borderRadius:1,alignItems:"center",justifyContent:"center",backgroundColor:e=>"rgba(".concat(e.palette.customColors.main,", 0.08)")},children:(0,i.jsx)(x.Z,{icon:"tabler:upload",fontSize:"1.75rem"})}),(0,i.jsx)(a.Z,{variant:"h4",sx:{mb:2.5},children:"Drop files here or click to upload."}),(0,i.jsx)(a.Z,{sx:{color:"text.secondary"},children:"Allowed *.jpeg, *.jpg, *.png, *.gif"}),(0,i.jsx)(a.Z,{sx:{color:"text.secondary"},children:"Max 2 files and max size of 2 MB"})]})]}),e.length?(0,i.jsxs)(u.Fragment,{children:[(0,i.jsx)(f.Z,{children:l}),(0,i.jsxs)("div",{className:"buttons",children:[(0,i.jsx)(j.Z,{color:"error",variant:"outlined",onClick:c,children:"Remove All"}),(0,i.jsx)(j.Z,{variant:"contained",children:"Upload Files"})]})]}):null]})},I=(0,i.jsx)("pre",{className:"language-jsx",children:(0,i.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Box from '@mui/material/Box'\nimport List from '@mui/material/List'\nimport Button from '@mui/material/Button'\nimport ListItem from '@mui/material/ListItem'\nimport Typography from '@mui/material/Typography'\nimport IconButton from '@mui/material/IconButton'\n\n// ** Icon Imports\nimport Icon from 'src/@core/components/icon'\n\n// ** Third Party Imports\nimport { useDropzone } from 'react-dropzone'\n\nconst FileUploaderMultiple = () => {\n  // ** State\n  const [files, setFiles] = useState([])\n\n  // ** Hooks\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file)))\n    }\n  })\n\n  const renderFilePreview = file => {\n    if (file.type.startsWith('image')) {\n      return <img width={38} height={38} alt={file.name} src={URL.createObjectURL(file)} />\n    } else {\n      return <Icon icon='tabler:file-description' />\n    }\n  }\n\n  const handleRemoveFile = file => {\n    const uploadedFiles = files\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\n    setFiles([...filtered])\n  }\n\n  const fileList = files.map(file => (\n    <ListItem key={file.name}>\n      <div className='file-details'>\n        <div className='file-preview'>{renderFilePreview(file)}</div>\n        <div>\n          <Typography className='file-name'>{file.name}</Typography>\n          <Typography className='file-size' variant='body2'>\n            {Math.round(file.size / 100) / 10 > 1000\n              ? {(Math.round(file.size / 100) / 10000).toFixed(1)} mb\n              : {(Math.round(file.size / 100) / 10).toFixed(1)} kb}\n          </Typography>\n        </div>\n      </div>\n      <IconButton onClick={() => handleRemoveFile(file)}>\n        <Icon icon='tabler:x' fontSize={20} />\n      </IconButton>\n    </ListItem>\n  ))\n\n  const handleRemoveAllFiles = () => {\n    setFiles([])\n  }\n\n  return (\n    <Fragment>\n      <div {...getRootProps({ className: 'dropzone' })}>\n        <input {...getInputProps()} />\n        <Box sx={{ display: 'flex', textAlign: 'center', alignItems: 'center', flexDirection: 'column' }}>\n          <Box\n            sx={{\n              mb: 8.75,\n              width: 48,\n              height: 48,\n              display: 'flex',\n              borderRadius: 1,\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: theme => rgba({theme.palette.customColors.main}, 0.08)\n            }}\n          >\n            <Icon icon='tabler:upload' fontSize='1.75rem' />\n          </Box>\n          <Typography variant='h4' sx={{ mb: 2.5 }}>\n            Drop files here or click to upload.\n          </Typography>\n          <Typography sx={{ color: 'text.secondary' }}>\n            (This is just a demo drop zone. Selected files are not actually uploaded.)\n          </Typography>\n        </Box>\n      </div>\n      {files.length ? (\n        <Fragment>\n          <List>{fileList}</List>\n          <div className='buttons'>\n            <Button color='error' variant='outlined' onClick={handleRemoveAllFiles}>\n              Remove All\n            </Button>\n            <Button variant='contained'>Upload Files</Button>\n          </div>\n        </Fragment>\n      ) : null}\n    </Fragment>\n  )\n}\n\nexport default FileUploaderMultiple\n"})}),z=(0,i.jsx)("pre",{className:"language-jsx",children:(0,i.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Box from '@mui/material/Box'\nimport List from '@mui/material/List'\nimport Button from '@mui/material/Button'\nimport ListItem from '@mui/material/ListItem'\nimport Typography from '@mui/material/Typography'\nimport IconButton from '@mui/material/IconButton'\n\n// ** Icon Imports\nimport Icon from 'src/@core/components/icon'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { useDropzone } from 'react-dropzone'\n\nconst FileUploaderRestrictions = () => {\n  // ** State\n  const [files, setFiles] = useState([])\n\n  // ** Hooks\n  const { getRootProps, getInputProps } = useDropzone({\n    maxFiles: 2,\n    maxSize: 2000000,\n    accept: {\n      'image/*': ['.png', '.jpg', '.jpeg', '.gif']\n    },\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file)))\n    },\n    onDropRejected: () => {\n      toast.error('You can only upload 2 files & maximum size of 2 MB.', {\n        duration: 2000\n      })\n    }\n  })\n\n  const renderFilePreview = file => {\n    if (file.type.startsWith('image')) {\n      return <img width={38} height={38} alt={file.name} src={URL.createObjectURL(file)} />\n    } else {\n      return <Icon icon='tabler:file-description' />\n    }\n  }\n\n  const handleRemoveFile = file => {\n    const uploadedFiles = files\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\n    setFiles([...filtered])\n  }\n\n  const fileList = files.map(file => (\n    <ListItem key={file.name}>\n      <div className='file-details'>\n        <div className='file-preview'>{renderFilePreview(file)}</div>\n        <div>\n          <Typography className='file-name'>{file.name}</Typography>\n          <Typography className='file-size' variant='body2'>\n            {Math.round(file.size / 100) / 10 > 1000\n              ? {(Math.round(file.size / 100) / 10000).toFixed(1)} mb\n              : {(Math.round(file.size / 100) / 10).toFixed(1)} kb}\n          </Typography>\n        </div>\n      </div>\n      <IconButton onClick={() => handleRemoveFile(file)}>\n        <Icon icon='tabler:x' fontSize={20} />\n      </IconButton>\n    </ListItem>\n  ))\n\n  const handleRemoveAllFiles = () => {\n    setFiles([])\n  }\n\n  return (\n    <Fragment>\n      <div {...getRootProps({ className: 'dropzone' })}>\n        <input {...getInputProps()} />\n        <Box sx={{ display: 'flex', textAlign: 'center', alignItems: 'center', flexDirection: 'column' }}>\n          <Box\n            sx={{\n              mb: 8.75,\n              width: 48,\n              height: 48,\n              display: 'flex',\n              borderRadius: 1,\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: theme => rgba({theme.palette.customColors.main}, 0.08)\n            }}\n          >\n            <Icon icon='tabler:upload' fontSize='1.75rem' />\n          </Box>\n          <Typography variant='h4' sx={{ mb: 2.5 }}>\n            Drop files here or click to upload.\n          </Typography>\n          <Typography sx={{ color: 'text.secondary' }}>Allowed *.jpeg, *.jpg, *.png, *.gif</Typography>\n          <Typography sx={{ color: 'text.secondary' }}>Max 2 files and max size of 2 MB</Typography>\n        </Box>\n      </div>\n      {files.length ? (\n        <Fragment>\n          <List>{fileList}</List>\n          <div className='buttons'>\n            <Button color='error' variant='outlined' onClick={handleRemoveAllFiles}>\n              Remove All\n            </Button>\n            <Button variant='contained'>Upload Files</Button>\n          </div>\n        </Fragment>\n      ) : null}\n    </Fragment>\n  )\n}\n\nexport default FileUploaderRestrictions\n"})}),R=(0,i.jsx)("pre",{className:"language-jsx",children:(0,i.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport Box from '@mui/material/Box'\nimport Typography from '@mui/material/Typography'\n\n// ** Icon Imports\nimport Icon from 'src/@core/components/icon'\n\n// ** Third Party Imports\nimport { useDropzone } from 'react-dropzone'\n\nconst FileUploaderSingle = () => {\n  // ** State\n  const [files, setFiles] = useState([])\n\n  // ** Hooks\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: false,\n    accept: {\n      'image/*': ['.png', '.jpg', '.jpeg', '.gif']\n    },\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file)))\n    }\n  })\n\n  const img = files.map(file => (\n    <img key={file.name} alt={file.name} className='single-file-image' src={URL.createObjectURL(file)} />\n  ))\n\n  return (\n    <Box {...getRootProps({ className: 'dropzone' })} sx={files.length ? { height: 450 } : {}}>\n      <input {...getInputProps()} />\n      {files.length ? (\n        img\n      ) : (\n        <Box sx={{ display: 'flex', textAlign: 'center', alignItems: 'center', flexDirection: 'column' }}>\n          <Box\n            sx={{\n              mb: 8.75,\n              width: 48,\n              height: 48,\n              display: 'flex',\n              borderRadius: 1,\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: theme => rgba({theme.palette.customColors.main}, 0.08)\n            }}\n          >\n            <Icon icon='tabler:upload' fontSize='1.75rem' />\n          </Box>\n          <Typography variant='h4' sx={{ mb: 2.5 }}>\n            Drop files here or click to upload.\n          </Typography>\n          <Typography sx={{ color: 'text.secondary' }}>\n            (This is just a demo drop zone. Selected files are not actually uploaded.)\n          </Typography>\n        </Box>\n      )}\n    </Box>\n  )\n}\n\nexport default FileUploaderSingle\n"})}),T=(0,l.ZP)(r())(e=>{let{theme:n}=e;return{textDecoration:"none",color:n.palette.primary.main}}),B=()=>(0,i.jsx)(m,{children:(0,i.jsxs)(s.ZP,{container:!0,spacing:6,className:"match-height",children:[(0,i.jsx)(c.Z,{title:(0,i.jsx)(a.Z,{variant:"h4",children:(0,i.jsx)(T,{href:"https://github.com/react-dropzone/react-dropzone/",target:"_blank",children:"React Dropzone"})}),subtitle:(0,i.jsx)(a.Z,{sx:{color:"text.secondary"},children:"Simple HTML5 drag-drop zone with React.js"})}),(0,i.jsx)(s.ZP,{item:!0,xs:12,children:(0,i.jsx)(d.Z,{title:"Upload Multiple Files",code:{tsx:null,jsx:I},children:(0,i.jsx)(v,{})})}),(0,i.jsx)(s.ZP,{item:!0,xs:12,children:(0,i.jsx)(d.Z,{title:"Upload Single Files",code:{tsx:null,jsx:R},children:(0,i.jsx)(g,{})})}),(0,i.jsx)(s.ZP,{item:!0,xs:12,children:(0,i.jsx)(d.Z,{title:"Upload Files with Restrictions",code:{tsx:null,jsx:z},children:(0,i.jsx)(F,{})})})]})});var N=B}},function(e){e.O(0,[5511,1599,9774,2888,179],function(){return e(e.s=89841)}),_N_E=e.O()}]);